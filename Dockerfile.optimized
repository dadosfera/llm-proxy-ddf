# Base image for building
ARG LITELLM_BUILD_IMAGE=cgr.dev/chainguard/python:latest-dev

# Runtime image
ARG LITELLM_RUNTIME_IMAGE=cgr.dev/chainguard/python:latest-dev

# Builder stage
FROM $LITELLM_BUILD_IMAGE AS builder

# Set the working directory to /app
WORKDIR /app

USER root

# Install build dependencies
RUN apk add --no-cache gcc python3-dev openssl openssl-dev

RUN pip install --upgrade pip && \
    pip install build

# Copy only necessary files for building
COPY requirements.txt .
COPY setup.py .
COPY pyproject.toml .
COPY litellm/ ./litellm/
COPY docker/ ./docker/

# Build Admin UI
RUN chmod +x docker/build_admin_ui.sh && ./docker/build_admin_ui.sh

# Build the package
RUN rm -rf dist/* && python -m build

# Install the package
RUN pip install dist/*.whl

# Install dependencies as wheels with cleanup
RUN pip wheel --no-cache-dir --wheel-dir=/wheels/ -r requirements.txt && \
    pip uninstall jwt -y && \
    pip uninstall PyJWT -y && \
    pip install PyJWT==2.9.0 --no-cache-dir

# Runtime stage
FROM $LITELLM_RUNTIME_IMAGE AS runtime

USER root

# Install runtime dependencies
RUN apk add --no-cache openssl tzdata

WORKDIR /app

# Copy only necessary files for runtime
COPY requirements.txt .
COPY litellm/ ./litellm/
COPY docker/ ./docker/
COPY prisma/ ./prisma/

# Copy the built wheel from the builder stage
COPY --from=builder /app/dist/*.whl .
COPY --from=builder /wheels/ /wheels/

# Install packages with immediate cleanup
RUN pip install *.whl /wheels/* --no-index --find-links=/wheels/ && \
    rm -f *.whl && \
    rm -rf /wheels && \
    pip cache purge

# Generate prisma client
RUN prisma generate
RUN chmod +x docker/entrypoint.sh
RUN chmod +x docker/prod_entrypoint.sh

EXPOSE 4000/tcp

ENTRYPOINT ["docker/prod_entrypoint.sh"]

CMD ["--port", "4000"] 